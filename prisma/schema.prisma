// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" // NOTE: sqlite does not work with NextAuth.js
    url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  tasks           Task[]
  teamId          String?
  team            Team?     @relation(fields: [teamId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
   id          String   @id @default(cuid())
   user        User[]
   task        Task[]
}

model Task {
   id          String   @id @default(cuid())
   name        String
   description String
   value       Int
   due         DateTime
   teamId      String
   team        Team     @relation(fields:[teamId], references: [id])
   userId      String
   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reward {
   id          String            @id @default(cuid())
   title       String
   points      Int
   categoryId  String
   category    RewardCategory    @relation(fields: [categoryId], references: [id])
}

model RewardCategory {
   id          String   @id @default(cuid())
   name        String
   image       String
   reward      Reward[]
}